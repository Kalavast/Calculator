#include<iostream>
#include <math.h>
#include<cstdlib>
#include<stdlib.h>
//#include<clearscreen.h> //messing around don't use
using namespace std;

/*
Authors: Aziz Aldawk, Ross Youngs, Joshua Carter, Matthew Janosik.
Purpose:
Date:
Class:INFO-I450
*/


struct Index
{
	double data;
	Index* linkf;
	Index* linkb;
};
Index *head = NULL;
Index *tail = new Index;
Index *current = NULL;
Index *save = NULL;


void Menu(); // Aziz's functions
void CreatList();// Matt's functions.
void sorting();
void DisplayList();
void FirstVarStat();
void Median(int);
void Mode();
void StDeviation(double, int);
				  /*
				  The main where program or complie start and run
				  the functions.
				  usually has nothing on it, only the menu.
				  */
int main() {
	Menu();
	//call function for menu...
	//system("clear");
	system("CLS");
}

/*================= Menu Function ===============
This function supposed to be chose what the user need
and  which the function.
For example, if user want adding, he/she
must chose number 1 to apply adding functing
and can use it.
if user want to exit, he/she may select zero
to stop the loop and exit.
==============================================*/
//Aziz's functions
void Menu() {

	int number;
	do {
		cout << "Creat list press <1>" << endl//make this like num 10
			<< "Sort list press <2>" << endl
			<< "Find First Varible Statistics <3>" << endl
			<< "Display List <4>" << endl
			<< "Quite press <0> " << endl;
		// The outputs ask user what she/he wants on menus options..
		cin >> number;
		//system("clear");
		system("CLS");//don't know why but the other one did not work on my computer
		//From what I have read this should not be a good thing to use since it does not always work
		//on every program. However I was not able to find a easy enouph solution but that is just
		// some information to keep in mind.
		// system("CLS"); works for visual studioes
		// system("clear"); works for linux
		
		switch (number)
		{
		case 1:
			//system("clear");
			CreatList();
			break;
		case 2:
			current = head->linkf;
			while (current->linkf != NULL)
			{
				current = current->linkf;
				save = head->linkf;
				sorting();
			}
			DisplayList();
			break;
		case 3:
			current = head->linkf;
			while (current->linkf != NULL)
			{
				current = current->linkf;
				save = head->linkf;
				sorting();
			}
			FirstVarStat();
			break;
		case 4:
			cout << "List Displayed " << endl;
			DisplayList();
			break;
		default:
			cout << "Quitting from program" << endl;
			exit(0); // Default, if user enter other number is not on the menu.
		}// menu funciton has been completed and worked correctly.
		 // default to a void of any bugs or error.

	} while (number != 0); // assume user select zero, loop will stop and exit.

}

// function's Matt
void CreatList() {
	double num = 0;
	cout << "Enter Numbers into the list and use 0 to stop entering numbers" << endl;
	do {
		
		while (!(cin >> num)) {
			system("CLS");   //change to system ("clear"); !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			cout << "Invalide input!" << endl;
			cin.clear();
			cin.ignore(numeric_limits<streamsize>::max(), '\n');
			cout << "Enter a number please. Enter 0 to exit." << endl;
			current = head;
			DisplayList();
		}
		if (num > 0)
		{

			if (head == NULL) {
				head = new Index;
				head->linkf = tail;
				tail->linkb = head;
				tail->data = num;
			}
			else {
				tail->linkf = new Index;
				tail->linkf->linkb = tail;
				tail = tail->linkf;
				tail->data = num;
				tail->linkf = NULL;
			}
		}
	} while (num != 0);
	tail->linkf = NULL;
}
//Matt functions.
// this functions does a _________ Sort in order to sort the function
void sorting()
{

	while (save->data != current->data || save->linkb->data != current->linkb->data) {

		if (current->data < save->data && save->linkf->data == current->data)
		{
			save->linkf = current->linkf;// current->link ?= NULL
			current->linkf = save;
			current->linkb = save->linkb;
			current->linkb->linkf = current;
			save->linkb = current;
			if (save->linkf == NULL)
			{
				return;
			}
			save->linkf->linkb = save;
			current = save;
			return;
		}

		if (current->data < save->data && current->linkf != NULL)
		{
			current->linkb->linkf = current->linkf;
			current->linkf->linkb = current->linkb;

			save->linkb->linkf = current;
			current->linkb = save->linkb;

			save->linkb = current;
			current = save; //current = current->linf
			save->linkb->linkf = save;
			return;
		}

		if (current->data < save->data && current->linkf == NULL)
		{
			tail = current->linkb;
			current->linkb->linkf = NULL;
			current->linkf = save;
			save->linkb->linkf = current;
			current->linkb = save->linkb;
			save->linkb = save->linkb->linkf;
			return;
		}
		save = save->linkf;
	}

}
//Matt's functions.
// This function finds mean,median,mode and range and gives the answer to the user.
void FirstVarStat()
{
	//int num = 0;
	double num1 = 0;
	//int num2 = 0;
	int quantity = 0;
	//int set[30] = { 0 };
	//int tally[30] = { 0 };
	//bool mode = true;


	current = head;
	do {
		current = current->linkf;
		quantity = quantity + 1;
		num1 = current->data + num1;
	} while (current->linkf != NULL);
	num1 = num1 / quantity;
	cout << "Quantity " << quantity << endl;
	cout << "Mean  " << num1 << endl;
	StDeviation(num1, quantity);
	Median(quantity);
	Mode();

	// FInd range
	num1 = tail->data - head->linkf->data;
	cout << "Range  " << num1 << endl;
}

void Median(int quantity)
{
	int num = 0;
	double num1 = 0;
	double num2 = 0;
	//finding median
	if (quantity % 2 == 0) // if even amout of numbers
	{
		num = quantity / 2;
		save = head;
		for (int i = 0; i != num; i++) {
			save = save->linkf;
		}
		num2 = save->data;
		num1 = save->linkf->data;
		cout << "Median  " << (num2 + num1) / 2 << endl;

	}
	else// if (num % 2 > 1) or an odd man out
	{
		num = quantity / 2;
		save = head->linkf;
		for (int i = 0; i != num; i++) {
			save = save->linkf;
		}
		num2 = save->data;
		cout << "Median  " << num2 << endl;
	}
	//Find Quartiles
	if (quantity % 4 == 0)
	{
		num = (quantity / 4);
		current = head->linkf;
		for (int i = 0; i != num; ++i) {
			current = current->linkf;
		}
		num1 = current->data;
		num2 = current->linkb->data;
		cout << "Q1  " << (num2 + num1) / 2 << endl;

		current = tail;
		for (int i = 0; i != num; ++i) {
			current = current->linkb;
		}
		num1 = current->data;
		num2 = current->linkf->data;
		cout << "Q3  " << (num2 + num1) / 2 << endl;
	}
	else
	{
		num = (quantity / 4);
		current = head->linkf;
		for (int i = 0; i != num; ++i) {
			current = current->linkf;
		}
		num1 = current->data;
		cout << "Q1  " << num1 << endl;

		current = tail;
		for (int i = 0; i != num; ++i) {
			current = current->linkb;
		}
		num1 = current->data;
		cout << "Q3  " << num1 << endl;
	}

}
void Mode()
{
	int num = 0;
	int num2 = 0;
	int quantity = 0;
	double set[30] = { 0 };
	int tally[30] = { 0 };
	bool mode = true;

	current = head->linkf;
	num = 0;
	set[0] = current->data;
	tally[0] = 1;
	do { //part 1: make a tally of all numbers
		current = current->linkf;
		if (set[num] != current->data) // 1,1,2,2,3,3,4,4
		{
			num = num + 1;
			set[num] = current->data;
		}
		tally[num] = tally[num] + 1;
	} while (current->linkf != NULL);

	num = 1;// set the couter to the second number in the list
			// num2 will start as the second number in the list
	do {// part 2: Find which tally is biggest and if they are both
		if (tally[num2] == tally[num]) {
			mode = false;
		}
		if (tally[num2] < tally[num]) {
			num2 = num;
			mode = true;
		}
		num = num + 1;//
	} while (tally[num] != 0);

	if (mode == true)//Check to see if mode id true
	{
		cout << "Mode  " << set[num2] << endl;
		//cout << "num  " << num2 << endl; 
		// this is only if you want to check wich place the num is from
	}
	else
	{
		cout << "Mode does not exist" << endl;
	}
}
void StDeviation(double mean, int quantity)
{
	double num1 = 0;
	double num2 = 0;
	current = head;
	do {
		current = current->linkf;
		num1 = (current->data - mean);
		num1 = pow(num1, 2);
		num2 = num2 + num1;
		//sqrt() square roots anything within the middle pow()
	} while (current->linkf != NULL);
	
	num1 = num2 / (quantity - 1);// sample
	num2 = num2 / (quantity);//pop
	
	num1 = pow(num1, .5);//sample
	num2 = pow(num2, .5);//pop
	cout << "Sample Standard Div " << num1 << endl;
	cout << "Poplulation Standard Div " << num2 << endl;
}
void DisplayList()
{
	current = head;
	do {
		current = current->linkf;
		cout << current->data << endl;
	} while (current->linkf != NULL);
}
